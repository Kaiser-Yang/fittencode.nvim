*fittencode.nvim.txt*       For Neovim >= 0.8.0       Last change: 2024 May 19

==============================================================================
Table of Contents                          *fittencode.nvim-table-of-contents*

1. fittencode.nvim                           |fittencode.nvim-fittencode.nvim|
  - Features                        |fittencode.nvim-fittencode.nvim-features|
  - Requirements                |fittencode.nvim-fittencode.nvim-requirements|
  - Installation                |fittencode.nvim-fittencode.nvim-installation|
  - Configuration              |fittencode.nvim-fittencode.nvim-configuration|
  - Usage                              |fittencode.nvim-fittencode.nvim-usage|
  - APIs                                |fittencode.nvim-fittencode.nvim-apis|
  - Special Thanks            |fittencode.nvim-fittencode.nvim-special-thanks|
2. Links                                               |fittencode.nvim-links|

==============================================================================
1. fittencode.nvim                           *fittencode.nvim-fittencode.nvim*

Fitten Code AI Programming Assistant for Neovim, helps you to use AI for
automatic completion in Neovim, with support for functions like login, logout,
shortcut key completion.


FEATURES                            *fittencode.nvim-fittencode.nvim-features*

- Fast completion thanks to `Fitten Code`
- Asynchronous I/O for improved performance
- Support for `Actions`
    - 1 Document code
    - 2 Edit code
    - 3 Explain code
    - 4 Find bugs
    - 5 Generate unit test
    - 6 Implement features
    - 7 Improve code
    - 8 Refactor code
    - 9 Start chat
- Accept all suggestions with `Tab`
- Accept line with `Ctrl + ðŸ¡«`
- Accept word with `Ctrl + ðŸ¡ª`
- Undo accepted text
- Automatic scrolling when previewing or completing code
- Multiple HTTP/REST backends such as `curl`, `libcurl` (WIP)
- Run as a `coc.nvim` (WIP) source or `nvim-cmp` source


REQUIREMENTS                    *fittencode.nvim-fittencode.nvim-requirements*

- Neovim >= 0.8.0
- curl


INSTALLATION                    *fittencode.nvim-fittencode.nvim-installation*

Install the plugin with your preferred package manager:


FOR EXAMPLE WITH LAZY.NVIM

>lua
    {
      'luozhiya/fittencode.nvim',
      config = function()
        require('fittencode').setup()
      end,
    }
<


FOREXAMPLE WITH PACKER.NVIM

>lua
    use {
      'luozhiya/fittencode.nvim',
      config = function()
        require('fittencode').setup()
      end,
    }
<


CONFIGURATION                  *fittencode.nvim-fittencode.nvim-configuration*


DEFAULTS ~

**fittencode.nvim** comes with the following defaults:

>lua
    {
      action = {
        document_code = {
          -- Show "Fitten Code - Document Code" in the editor context menu, when you right-click on the code.
          show_in_editor_context_menu = true,
        },
        edit_code = {
          -- Show "Fitten Code - Edit Code" in the editor context menu, when you right-click on the code.
          show_in_editor_context_menu = true,
        },
        explain_code = {
          -- Show "Fitten Code - Explain Code" in the editor context menu, when you right-click on the code.
          show_in_editor_context_menu = true,
        },
        find_bugs = {
          -- Show "Fitten Code - Find Bugs" in the editor context menu, when you right-click on the code.
          show_in_editor_context_menu = true,
        },
        generate_unit_test = {
          -- Show "Fitten Code - Generate UnitTest" in the editor context menu, when you right-click on the code.
          show_in_editor_context_menu = true,
        },
        start_chat = {
          -- Show "Fitten Code - Start Chat" in the editor context menu, when you right-click on the code.
          show_in_editor_context_menu = true,
        },
      },
      disable_specific_inline_completion = {
        -- Disable auto-completion for some specific file suffixes by entering them below
        -- For example, `suffixes = {'lua', 'cpp'}`
        suffixes = {},
      },
      inline_completion = {
        -- Enable inline code completion.
        ---@type boolean
        enable = true,
        -- Disable auto completion when the cursor is within the line.
        ---@type boolean
        disable_completion_within_the_line = false,
        -- Disable auto completion when pressing Backspace or Delete.
        ---@type boolean
        disable_completion_when_delete = false,
      },
      delay_completion = {
        -- Delay time for inline completion (in milliseconds).
        ---@type integer
        delaytime = 0,
      },
      -- Enable/Disable the default keymaps in inline completion.
      use_default_keymaps = true,
      -- Setting for source completion.
      source_completion = {
        -- Enable source completion.
        enable = true,
      },
      -- Set the mode of the completion.
      -- Available options:
      -- - 'inline' (default)
      -- - 'source'
      completion_mode = 'inline',
      ---@class LogOptions
      log = {
        -- Log level.
        level = vim.log.levels.WARN,
        -- Max log file size in MB, default is 10MB
        max_size = 10,
      },
    }
<


INLINE MODE ~

Set `updatetime` to a lower value to improve performance:

>lua
    -- Neovim default updatetime is 4000
    vim.opt.updatetime = 200
<


SOURCE MODE ~

>lua
    require('fittencode').setup({
      completion_mode ='source',
    })
    require('cmp').setup({
      sources = { name = 'fittencode', group_index = 1 },
      mapping = {
        ['<cr>'] = cmp.mapping.confirm({ behavior = cmp.ConfirmBehavior.Insert, select = false }),
      }
    })
<


USAGE                                  *fittencode.nvim-fittencode.nvim-usage*


ACCOUNT COMMANDS ~

  -------------------------------------------------------------------------
  Command           Description
  ----------------- -------------------------------------------------------
  Fitten register   If you havenâ€™t registered yet, please run the command
                    to register.

  Fitten login      Try the command Fitten login <user> <password> to
                    login.

  Fitten logout     Logout account
  -------------------------------------------------------------------------

ACTION COMMANDS ~

- Try the command `Fitten generate_unit_test <test_framework> <language>` to generate unit test with specific test framework and language.

  Command                             Description
  ----------------------------------- ----------------------------
  Fitten document_code                Document code
  Fitten edit_code                    Edit code
  Fitten explain_code                 Explain code
  Fitten find_bugs                    Find bugs
  Fitten generate_unit_test           Generate unit test
  Fitten implement_features           Implement features
  Fitten improve_code                 Improve code
  Fitten refactor_code                Refactor code
  Fitten guess_programming_language   Guess programming language
  Fitten analyze_data                 Analyze data
  Fitten start_chat                   Start chat

DEFAULT MAPPINGS ~

  Mappings   Action
  ---------- ------------------------
  Tab        Accept all suggestions
  Ctrl + ðŸ¡«   Accept line
  Ctrl + ðŸ¡ª   Accept word

APIS                                    *fittencode.nvim-fittencode.nvim-apis*

`fittencode.nvim` provides a set of APIs to help you integrate it with other
plugins or scripts.

- Access the APIs by calling `require('fittencode').<api_name>()`.


PARAMETERS TYPES ~

>lua
    -- Log levels
    vim.log = {
      levels = {
        TRACE = 0,
        DEBUG = 1,
        INFO = 2,
        WARN = 3,
        ERROR = 4,
        OFF = 5,
      },
    }
    
    ---@class ActionOptions
    ---@field prompt? string
    ---@field content? string
    ---@field language? string
    
    ---@class GenerateUnitTestOptions : ActionOptions
    ---@field test_framework string
    
    ---@class ImplementFeaturesOptions : ActionOptions
    ---@field feature_type string
<


LIST OF APIS ~

  ---------------------------------------------------------------------------------------
  API Prototype                                  Description
  ---------------------------------------------- ----------------------------------------
  login(username, password)                      Login to Fitten Code AI

  logout()                                       Logout from Fitten Code AI

  register()                                     Register to Fitten Code AI

  set_log_level(level)                           Set the log level

  get_current_status()                           Get the current status of the
                                                 InlineEngine and ActionEngine

  has_suggestion()                               Check if there is a suggestion

  accept_all_suggestions()                       Accept all suggestions

  accept_line()                                  Accept line

  accept_word()                                  Accept word

  document_code(ActionOptions)                   Document code

  edit_code(ActionOptions)                       Edit code

  explain_code(ActionOptions)                    Explain code

  find_bugs(ActionOptions)                       Find bugs

  generate_unit_test(GenerateUnitTestOptions)    Generate unit test

  implement_features(ImplementFeaturesOptions)   Implement features

  improve_code(ActionOptions)                    Improve code

  refactor_code(ActionOptions)                   Refactor code

  guess_programming_language(ActionOptions)      Guess programming language

  analyze_data(ActionOptions)                    Analyze data

  start_chat(ActionOptions)                      Start chat

  stop_eval()                                    Stop the evaluation
  ---------------------------------------------------------------------------------------

SPECIAL THANKS                *fittencode.nvim-fittencode.nvim-special-thanks*

- https://github.com/FittenTech/fittencode.vim

==============================================================================
2. Links                                               *fittencode.nvim-links*

1. *fittencode-KMP-demo*: https://github.com/luozhiya/fittencode.nvim/assets/90168447/d6fa4c66-f64b-4880-b7a9-4245226be0ac

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
